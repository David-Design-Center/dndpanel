import { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { Folder, Tag, Plus, Search, X, ChevronLeft } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useLabel } from '../contexts/LabelContext';

interface FoldersColumnProps {
  isExpanded: boolean;
  onToggle: () => void;
}

function FoldersColumn({ isExpanded, onToggle }: FoldersColumnProps) {
  const { labels, loadingLabels } = useLabel();
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  // Filter and clean labels for display
  const filteredLabels = useMemo(() => {
    const cleanedLabels = labels
      .map(label => ({
        ...label,
        displayName: label.name
          .replace(/^\[Gmail\]\/|^\[Gmail\]\s*›\s*|^Gmail\/|^INBOX\/|^Categories\//i, '') // Remove Gmail prefixes
          .replace(/^--/, '') // Remove leading dashes
          .replace(/\//g, ' › ') // Replace slashes with arrow for hierarchy
          .trim()
      }))
      .filter(label => {
        // Filter out system labels - only exclude exact matches and well-known system labels
        const name = label.name.toLowerCase();
        return name !== 'inbox' && 
               name !== 'sent' && 
               name !== 'drafts' && 
               name !== 'spam' && 
               name !== 'trash' &&
               name !== 'important' &&
               name !== 'starred' &&
               !name.startsWith('category_') &&
               !name.startsWith('label_') &&
               label.displayName.length > 0; // Make sure we have a display name
      });

    // Then filter by search term
    if (!searchTerm.trim()) return cleanedLabels;
    
    return cleanedLabels.filter(label => 
      label.displayName.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [labels, searchTerm]);

  const handleLabelClick = (label: any) => {
    // Navigate to inbox with label filter
    navigate(`/inbox?labelName=${encodeURIComponent(label.name)}`);
  };

  return (
    <div className="h-full bg-muted/30 border-r border-border">
      {/* Collapsed State Content - Improved */}
      {!isExpanded && (
        <div className="h-full flex flex-col items-center pt-4 overflow-hidden">
          <button
            onClick={onToggle}
            className="p-2 hover:bg-gray-200 rounded-lg transition-all duration-200 flex items-center justify-center group"
            title="Expand Folders"
          >
            <Folder size={16} className="text-gray-600 group-hover:text-gray-800 transition-colors duration-200" />
          </button>
        </div>
      )}

      {/* Expanded State Content */}
      {isExpanded && (
        <div className="h-full bg-white flex flex-col">
          {/* Header with Toggle Button */}
          <div className="flex items-center justify-between p-3 border-b border-gray-200 bg-gray-50">
            <div className="flex items-center space-x-2">
              <Folder size={16} className="text-gray-600" />
              <span className="text-sm font-semibold text-gray-800">Folders</span>
            </div>
            <button
              onClick={onToggle}
              className="p-1 hover:bg-gray-200 rounded transition-all duration-200 hover:scale-105"
              title="Collapse folders"
            >
              <ChevronLeft size={16} className="text-gray-600" />
            </button>
          </div>

          {/* Compose Button */}
          <AnimatePresence>
            <motion.div 
              className="p-3"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <Button 
                className="w-full mb-2" 
                size="sm"
                onClick={() => navigate('/compose')}
              >
                <Plus className="w-4 h-4 mr-2" />
                Compose
              </Button>
            </motion.div>
          </AnimatePresence>
            
          {/* Search Section */}
          <AnimatePresence>
            <motion.div 
              className="p-3 border-b border-gray-200 bg-white"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="relative">
                <Search size={14} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <Input
                  placeholder="Search folders..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-8 pr-8 text-xs h-8 border-gray-200"
                />
                {searchTerm && (
                  <button
                    onClick={() => setSearchTerm('')}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    <X size={14} />
                  </button>
                )}
              </div>
            </motion.div>
          </AnimatePresence>

          {/* Folders List */}
          <AnimatePresence>
            <motion.div 
              className="flex-1 overflow-y-auto custom-scrollbar"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              {loadingLabels ? (
                <div className="p-4 text-center">
                  <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-500 mx-auto mb-2"></div>
                  <p className="text-xs text-gray-500">Loading folders...</p>
                </div>
              ) : filteredLabels.length > 0 ? (
                <motion.div 
                  className="p-2"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.2 }}
                >
                  {filteredLabels.map((label, index) => (
                    <motion.div
                      key={label.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.2, delay: index * 0.02 }}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <Button
                        variant="ghost"
                        onClick={() => handleLabelClick(label)}
                        className="w-full justify-start px-3 py-2 mb-1 text-left hover:bg-white hover:shadow-sm rounded-md h-[36px] group transition-all duration-150"
                      >
                        <div className="flex items-center w-full">
                          <Tag size={14} className="mr-2 text-gray-400 group-hover:text-blue-500 flex-shrink-0 transition-colors" />
                          <div className="flex-1 min-w-0">
                            <p className="text-xs font-medium text-gray-700 group-hover:text-gray-900 truncate transition-colors">
                              {label.displayName}
                            </p>
                            {(label.messagesUnread && label.messagesUnread > 0) && (
                              <p className="text-xs text-blue-600 mt-0.5">
                                {label.messagesUnread} unread
                              </p>
                            )}
                          </div>
                          {(label.messagesUnread && label.messagesUnread > 0) && (
                            <motion.div 
                              className="ml-2 bg-blue-100 text-blue-700 text-xs px-1.5 py-0.5 rounded-full min-w-[20px] text-center flex-shrink-0"
                              whileHover={{ scale: 1.1 }}
                              transition={{ duration: 0.1 }}
                            >
                              {label.messagesUnread > 99 ? '99+' : label.messagesUnread}
                            </motion.div>
                          )}
                        </div>
                      </Button>
                    </motion.div>
                  ))}
                </div>
              ) : searchTerm ? (
                <div className="p-4 text-center">
                  <p className="text-xs text-gray-500">No folders found for "{searchTerm}"</p>
                </div>
              ) : (
                <div className="p-4 text-center">
                  <p className="text-xs text-gray-500">No folders available</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default FoldersColumn;
