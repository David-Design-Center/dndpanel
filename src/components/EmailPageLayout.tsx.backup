import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { RefreshCw, Search, ChevronDown, Settings } from 'lucide-react';
import EmailListItem      console.log(`ðŸ”„ EmailPageLayout (${pageType}): Cache updated, refreshing display`);from '../components/EmailListItem';
import ThreeColumnLayout from '../components/ThreeColumnLayout';
import { Tabs, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Email } from '../types';
import { 
  getEmails, 
  getUnreadEmails, 
  getSentEmails, 
  getDraftEmails, 
  getTrashEmails,
  PaginatedEmailServiceResponse
} from '../services/emailService';
import { useAuth } from '../contexts/AuthContext';
import { useInboxLayout } from '../contexts/InboxLayoutContext';
import { useEmailPreloader } from '../contexts/EmailPreloaderContext';
// Import DND packages
import { 
  DndContext, 
  DragOverlay,
  useSensor, 
  useSensors, 
  MouseSensor, 
  TouchSensor, 
  closestCenter,
  DragEndEvent 
} from '@dnd-kit/core';
import { restrictToVerticalAxis } from '@dnd-kit/modifiers';
import { createPortal } from 'react-dom';

type EmailPageType = 'inbox' | 'unread' | 'sent' | 'drafts' | 'trash';

interface EmailPageLayoutProps {
  pageType: EmailPageType;
  title: string;
}

function EmailPageLayout({ pageType, title }: EmailPageLayoutProps) {
  const navigate = useNavigate();
  const { isGmailSignedIn } = useAuth();
  const { selectEmail } = useInboxLayout();
  const { getCachedEmails, refreshPage } = useEmailPreloader();

  // IMMEDIATE cache check - before any state initialization
  const initialCacheData = getCachedEmails(pageType);
  const hasInitialCache = initialCacheData && initialCacheData.isLoaded;

  // Initialize state with cached data if available
  if (hasInitialCache) {
    console.log(`ðŸ’¾ EmailPageLayout (${pageType}): Found cached data during initialization - ${initialCacheData.emails.length} emails`);
  }

  const [emails, setEmails] = useState<Email[]>(hasInitialCache ? initialCacheData.emails : []);
  const [loading, setLoading] = useState(!hasInitialCache); // Only show loading if no cache available
  const [transitioning, setTransitioning] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPageToken, setCurrentPageToken] = useState<string | undefined>(hasInitialCache ? initialCacheData.nextPageToken : undefined);
  const [hasMoreEmails, setHasMoreEmails] = useState(hasInitialCache ? initialCacheData.hasMoreEmails : false);
  const [activeTab, setActiveTab] = useState<'all' | 'read' | 'unread'>('all');

  // DND Setup
  const sensors = useSensors(
    useSensor(MouseSensor, {
      activationConstraint: {
        distance: 10,
      },
    }),
    useSensor(TouchSensor, {
      activationConstraint: {
        delay: 250,
        tolerance: 5,
      },
    })
  );

  const [activeEmail, setActiveEmail] = useState<Email | null>(null);

  const getEmailFunction = () => {
    switch (pageType) {
      case 'unread': return getUnreadEmails;
      case 'sent': return getSentEmails;
      case 'drafts': return getDraftEmails;
      case 'trash': return getTrashEmails;
      default: return getEmails;
    }
  };

  const fetchEmails = async (forceRefresh = false, loadMore = false) => {
    if (!isGmailSignedIn) return;

    try {
      // AGGRESSIVE CACHE CHECK: Always check cache first
      const cachedData = getCachedEmails(pageType);
      console.log(`ðŸ“§ EmailPageLayout (${pageType}): Checking cache...`, cachedData ? `Found ${cachedData.emails.length} emails, loaded: ${cachedData.isLoaded}` : 'No cache found');
      
      if (!forceRefresh && cachedData && cachedData.isLoaded) {
        // Use cached data immediately - ZERO loading states!
        console.log(`âš¡ EmailPageLayout (${pageType}): Using cached data, no loading needed!`);
        setEmails(cachedData.emails);
        setCurrentPageToken(cachedData.nextPageToken);
        setHasMoreEmails(cachedData.hasMoreEmails);
        setLoading(false);
        setTransitioning(false);
        setRefreshing(false);
        return;
      }

      // Only show loading states when we absolutely must fetch fresh data
      if (!loadMore) {
        if (cachedData && cachedData.isLoaded && !forceRefresh) {
          // We have cached data, minimal transition
          setTransitioning(true);
          setLoading(false);
        } else {
          // No cached data or forced refresh, show loading
          setLoading(true);
          setTransitioning(false);
        }
      } else {
        setLoadingMore(true);
      }

      // If it's a refresh, use the refresh function
      if (forceRefresh) {
        await refreshPage(pageType);
        const updatedCache = getCachedEmails(pageType);
        if (updatedCache) {
          setEmails(updatedCache.emails);
          setCurrentPageToken(updatedCache.nextPageToken);
          setHasMoreEmails(updatedCache.hasMoreEmails);
        }
      } else {
        // For load more, we still need to use the old logic
        if (loadMore) {
          const emailFunction = getEmailFunction();
          const pageToken = currentPageToken;
          const query = searchQuery.trim() || undefined;

          let response: PaginatedEmailServiceResponse;
          
          if (pageType === 'inbox') {
            response = await getEmails(false, query, 10, pageToken);
          } else {
            const emailsData = await emailFunction(false);
            response = {
              emails: Array.isArray(emailsData) ? emailsData : emailsData.emails || [],
              resultSizeEstimate: Array.isArray(emailsData) ? emailsData.length : emailsData.resultSizeEstimate || 0,
              nextPageToken: undefined
            };
          }

          setEmails(prevEmails => [...prevEmails, ...(response.emails || [])]);
          setCurrentPageToken(response.nextPageToken);
          setHasMoreEmails(!!response.nextPageToken);
        } else {
          // Wait for preloader to finish if it hasn't
          const finalCache = getCachedEmails(pageType);
          if (finalCache && finalCache.isLoaded) {
            setEmails(finalCache.emails);
            setCurrentPageToken(finalCache.nextPageToken);
            setHasMoreEmails(finalCache.hasMoreEmails);
          }
        }
      }
      
    } catch (error) {
      console.error(`Error fetching ${pageType} emails:`, error);
    } finally {
      setLoading(false);
      setLoadingMore(false);
      setRefreshing(false);
      setTransitioning(false);
    }
  };

  // INSTANT CACHE INITIALIZATION - only update if cache changes
  const cachedData = getCachedEmails(pageType);
  const hasCache = cachedData && cachedData.isLoaded;

  useEffect(() => {
    // Update state if cache has new data (but don't cause loading states)
    if (hasCache && cachedData !== initialCacheData) {
      console.log(`ï¿½ EmailPageLayout (${pageType}): Cache updated, refreshing display`);
      setEmails(cachedData.emails);
      setCurrentPageToken(cachedData.nextPageToken);
      setHasMoreEmails(cachedData.hasMoreEmails);
      setLoading(false);
      setTransitioning(false);
    }
  }, [pageType, hasCache, cachedData, initialCacheData]);

  useEffect(() => {
    if (isGmailSignedIn) {
      // Only fetch if we don't have any cached data
      if (!hasCache && !hasInitialCache) {
        console.log(`ðŸ“§ EmailPageLayout (${pageType}): No cache found, fetching fresh data...`);
        fetchEmails();
      } else {
        console.log(`âš¡ EmailPageLayout (${pageType}): Cache available, skipping fetch on mount`);
      }
    } else {
      setLoading(false);
    }
  }, [isGmailSignedIn, pageType, activeTab, searchQuery]);

  const handleRefresh = () => {
    if (!isGmailSignedIn) return;
    setRefreshing(true);
    fetchEmails(true);
  };

  const handleLoadMore = () => {
    if (hasMoreEmails && !loadingMore && isGmailSignedIn) {
      fetchEmails(false, true);
    }
  };

  const handleEmailClick = (id: string) => {
    navigate(`/${pageType}/email/${id}`);
    selectEmail(id);
  };

  const handleEmailUpdate = (updatedEmail: Email) => {
    setEmails(prevEmails => 
      prevEmails.map(email => 
        email.id === updatedEmail.id ? updatedEmail : email
      )
    );
  };

  const handleEmailDelete = (emailId: string) => {
    setEmails(prevEmails => 
      prevEmails.filter(email => email.id !== emailId)
    );
  };

  const handleTabChange = (value: string) => {
    const newTab = value as 'all' | 'read' | 'unread';
    setActiveTab(newTab);
    setCurrentPageToken(undefined);
    setHasMoreEmails(false);
  };

  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchQuery.trim() && !refreshing) {
      fetchEmails(true);
    }
  };

  const handleDragStart = (event: any) => {
    const { active } = event;
    const email = emails.find(email => email.id === active.id);
    setActiveEmail(email || null);
  };

  const handleDragEnd = (_event: DragEndEvent) => {
    setActiveEmail(null);
    // Handle drag end logic here
  };

  const handleDragCancel = () => {
    setActiveEmail(null);
  };

  // If Gmail is not signed in, show connection prompt
  if (!isGmailSignedIn) {
    return (
      <div className="fade-in">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-semibold text-gray-800">{title}</h1>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-8 text-center">
          <div className="max-w-md mx-auto">
            <div className="mb-4">
              <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Settings className="w-8 h-8 text-yellow-600" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Gmail Not Connected</h3>
              <p className="text-gray-600 mb-6">
                To view and manage your emails, please connect your Gmail account in the settings.
              </p>
              <button
                onClick={() => navigate('/settings')}
                className="btn btn-primary flex items-center mx-auto"
              >
                <Settings size={18} className="mr-2" />
                Go to Settings
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <ThreeColumnLayout onEmailUpdate={handleEmailUpdate}>
      <div className={`h-full flex flex-col transition-opacity duration-300 ${emails.length > 0 || !loading ? 'opacity-100' : 'opacity-0'}`}>
        {/* Search Bar */}
        <form onSubmit={handleSearchSubmit} className="p-4 pb-0">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="text"
              placeholder="Search emails..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
          </div>
        </form>

        {/* Header Row */}
        <div className="px-4 pb-0">
          <div className="flex items-center justify-between mb-0">
            <h1 className="text-xl font-semibold text-gray-800 truncate">{title}</h1>
          </div>
        </div>
        
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
          onDragCancel={handleDragCancel}
          modifiers={[restrictToVerticalAxis]}
        >
          <div className="bg-white rounded-lg shadow-sm overflow-hidden flex-1 flex flex-col mx-4 max-w-full">
            {/* Tabs Navigation */}
            <div className="border-b border-gray-200 max-w-full overflow-hidden">
              <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full email-tabs max-w-full">
                <TabsList className="h-12 bg-transparent p-0 border-0 rounded-none w-full justify-between max-w-full overflow-hidden">
                  <div className="flex min-w-0">
                    <TabsTrigger 
                      value="all" 
                      className="rounded-none border-0 bg-transparent px-4 py-3 text-sm font-medium text-gray-500 hover:text-gray-700 data-[state=active]:bg-transparent data-[state=active]:text-gray-900 data-[state=active]:shadow-none flex-shrink-0"
                    >
                      All
                    </TabsTrigger>
                    <TabsTrigger 
                      value="read" 
                      className="rounded-none border-0 bg-transparent px-4 py-3 text-sm font-medium text-gray-500 hover:text-gray-700 data-[state=active]:bg-transparent data-[state=active]:text-gray-900 data-[state=active]:shadow-none flex-shrink-0"
                    >
                      Read
                    </TabsTrigger>
                    <TabsTrigger 
                      value="unread" 
                      className="rounded-none border-0 bg-transparent px-4 py-3 text-sm font-medium text-gray-500 hover:text-gray-700 data-[state=active]:bg-transparent data-[state=active]:text-gray-900 data-[state=active]:shadow-none flex-shrink-0"
                    >
                      Unread
                    </TabsTrigger>
                  </div>
                  <div className="flex items-center gap-1 mr-2 flex-shrink-0">
                    <button 
                      onClick={handleRefresh}
                      className="p-2 hover:bg-gray-100 rounded-md transition-colors flex items-center justify-center"
                      disabled={refreshing}
                      title="Refresh emails"
                    >
                      <RefreshCw size={16} className={`text-gray-500 hover:text-gray-700 ${refreshing ? 'animate-spin' : ''}`} />
                    </button>
                  </div>
                </TabsList>
              </Tabs>
            </div>

            {/* Email List Content */}
            {loading && !refreshing ? (
              <div className="flex-1 flex justify-center items-center">
                <div className="flex flex-col items-center space-y-3">
                  <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-500"></div>
                  <p className="text-sm text-gray-500">Loading emails...</p>
                </div>
              </div>
            ) : emails.length > 0 ? (
              <div className="flex-1 overflow-y-auto max-w-full relative">
                {/* Transitioning overlay */}
                {transitioning && (
                  <div className="absolute inset-0 bg-white/70 backdrop-blur-sm z-10 flex items-start justify-center pt-8">
                    <div className="flex items-center space-x-2 bg-white px-4 py-2 rounded-full shadow-sm">
                      <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-primary-500"></div>
                      <span className="text-sm text-gray-600">Loading {title.toLowerCase()}...</span>
                    </div>
                  </div>
                )}
                {emails.map((email) => (
                  <EmailListItem 
                    key={email.id} 
                    email={email} 
                    onClick={handleEmailClick}
                    onEmailUpdate={handleEmailUpdate}
                    onEmailDelete={handleEmailDelete}
                  />
                ))}
                
                {/* Load More Button */}
                {hasMoreEmails && (
                  <div className="border-t border-gray-200 p-4">
                    <button
                      onClick={handleLoadMore}
                      disabled={loadingMore}
                      className="w-full btn btn-secondary flex items-center justify-center"
                    >
                      {loadingMore ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-primary-500 mr-2"></div>
                          Loading more emails...
                        </>
                      ) : (
                        <>
                          <ChevronDown size={18} className="mr-2" />
                          Load More Emails
                        </>
                      )}
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <div className="p-8 text-center">
                <p className="text-gray-500">
                  {pageType === 'drafts' ? 'No drafts' : 
                   pageType === 'sent' ? 'No sent emails' : 
                   pageType === 'trash' ? 'Trash is empty' : 
                   pageType === 'unread' ? 'No unread emails' : 'No emails'}
                </p>
              </div>
            )}
          </div>

          {/* Drag Overlay */}
          {createPortal(
            <DragOverlay>
              {activeEmail ? (
                <div className="opacity-60 bg-white rounded-lg shadow-lg border-2 border-blue-300">
                  <EmailListItem 
                    email={activeEmail} 
                    onClick={() => {}}
                    isDraggable={false}
                    onEmailUpdate={() => {}}
                    onEmailDelete={() => {}}
                  />
                </div>
              ) : null}
            </DragOverlay>,
            document.body
          )}
        </DndContext>
      </div>
    </ThreeColumnLayout>
  );
}

export default EmailPageLayout;
