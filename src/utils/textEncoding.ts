/**
 * Text encoding utilities for fixing common character encoding issues
 * Especially useful for Estonian and other Nordic/Baltic characters
 */

/**
 * Clean encoding issues, especially for Estonian characters and double-encoded UTF-8
 * @param text - The text to clean
 * @returns Cleaned text with proper character encoding
 */
export function cleanEncodingIssues(text: string): string {
  if (!text) return '';
  
  return text
    // Fix Estonian characters (double-encoded UTF-8)
    .replace(/√É‚Äû/g, '√Ñ') // Capital A with diaeresis
    .replace(/√É¬§/g, '√§') // Small a with diaeresis
    .replace(/√É‚Äì/g, '√ñ') // Capital O with diaeresis
    .replace(/√É¬∂/g, '√∂') // Small o with diaeresis
    .replace(/√É≈ì/g, '√ú') // Capital U with diaeresis
    .replace(/√É¬º/g, '√º') // Small u with diaeresis
    .replace(/√Ö /g, '≈†') // Capital S with caron
    .replace(/√Ö¬°/g, '≈°') // Small s with caron
    .replace(/√Ö¬Ω/g, '≈Ω') // Capital Z with caron
    .replace(/√Ö¬æ/g, '≈æ') // Small z with caron
    // Fix problematic Estonian character combinations
    .replace(/√ê¬µ/g, '√µ') // Fix specific Estonian √µ encoding issue
    .replace(/√ê√ê¬µ/g, '√ï') // Fix capital Estonian √ï encoding issue
    .replace(/√ê¬∏/g, '√§') // Fix another Estonian √§ variant
    .replace(/√ê¬∞/g, 'a') // Fix specific a encoding
    .replace(/√∞/g, 'üòä') // Fix emoji encoding (common smiley)
    // Fix other Nordic/Baltic characters
    .replace(/√É‚Ä¶/g, '√Ö') // Capital A with ring above
    .replace(/√É¬•/g, '√•') // Small a with ring above
    .replace(/√É‚Ä†/g, '√Ü') // Capital AE
    .replace(/√É¬¶/g, '√¶') // Small ae
    .replace(/√ÉÀú/g, '√ò') // Capital O with stroke
    .replace(/√É¬∏/g, '√∏') // Small o with stroke
    .replace(/√É¬∞/g, '√∞') // Small eth
    .replace(/√É/g, '√ê') // Capital eth
    .replace(/√É≈æ/g, '√û') // Capital thorn
    .replace(/√É¬æ/g, '√æ') // Small thorn
    // Fix common French/Spanish characters
    .replace(/√É¬™/g, '√™') // Small e with circumflex
    .replace(/√É¬©/g, '√©') // Small e with acute
    .replace(/√É¬®/g, '√®') // Small e with grave
    .replace(/√É /g, '√†') // Small a with grave
    .replace(/√É¬°/g, '√°') // Small a with acute
    .replace(/√É¬ß/g, '√ß') // Small c with cedilla
    .replace(/√É¬±/g, '√±') // Small n with tilde
    .replace(/√É¬≠/g, '√≠') // Small i with acute
    .replace(/√É¬≥/g, '√≥') // Small o with acute
    .replace(/√É¬∫/g, '√∫') // Small u with acute
    // Fix German characters
    .replace(/√É\u009F/g, '√ü') // German eszett
    // Fix common UTF-8 issues
    .replace(/√Ç/g, '') // Remove unnecessary √Ç characters
    .replace(/√¢‚Ç¨‚Ñ¢/g, "'") // Right single quotation mark
    .replace(/√¢‚Ç¨≈ì/g, '"') // Left double quotation mark
    .replace(/√¢‚Ç¨/g, '"') // Right double quotation mark
    .replace(/√¢‚Ç¨¬¶/g, '...') // Horizontal ellipsis
    .replace(/√¢‚Ç¨"/g, '‚Äì') // En dash
    .replace(/√¢‚Ç¨"/g, '‚Äî') // Em dash
    // Remove multiple consecutive spaces
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * Alternative encoding cleaner for cases where the above doesn't work
 * This handles some edge cases with different encoding patterns
 */
export function cleanEncodingIssuesAlternative(text: string): string {
  if (!text) return '';

  try {
    // Try to decode if it looks like it might be URL-encoded
    if (text.includes('%')) {
      try {
        text = decodeURIComponent(text);
      } catch {
        // If decoding fails, continue with original text
      }
    }

    // Fix some common double-encoding patterns
    text = text
      .replace(/=C3=A4/gi, '√§')  // √§ in quoted-printable
      .replace(/=C3=B6/gi, '√∂')  // √∂ in quoted-printable
      .replace(/=C3=BC/gi, '√º')  // √º in quoted-printable
      .replace(/=C3=84/gi, '√Ñ')  // √Ñ in quoted-printable
      .replace(/=C3=96/gi, '√ñ')  // √ñ in quoted-printable
      .replace(/=C3=9C/gi, '√ú')  // √ú in quoted-printable
      .replace(/=C3=B5/gi, '√µ')  // √µ in quoted-printable
      .replace(/=C3=95/gi, '√ï')  // √ï in quoted-printable
      // Handle Cyrillic-like encoding issues for Estonian
      .replace(/√ê¬µ/g, '√µ')        // Fix specific Estonian √µ encoding issue
      .replace(/√ê√ê¬µ/g, '√ï')       // Fix capital Estonian √ï encoding issue
      .replace(/√ê¬∏/g, '√§')        // Fix another Estonian √§ variant
      .replace(/√ê¬∞/g, 'a')        // Fix specific a encoding
      .replace(/√∞/g, 'üòä');       // Fix emoji encoding (common smiley)

    return cleanEncodingIssues(text);
  } catch (error) {
    console.warn('Error in alternative encoding cleanup:', error);
    return cleanEncodingIssues(text);
  }
}

/**
 * Clean encoding issues specifically for email subjects
 * This combines multiple approaches for comprehensive cleaning
 */
export function cleanEmailSubject(subject: string): string {
  if (!subject) return '';
  
  // First try the standard cleaning
  let cleaned = cleanEncodingIssues(subject);
  
  // If it still looks problematic, try the alternative approach
  if (cleaned.includes('√É') || cleaned.includes('√¢‚Ç¨')) {
    cleaned = cleanEncodingIssuesAlternative(cleaned);
  }
  
  return cleaned;
}
